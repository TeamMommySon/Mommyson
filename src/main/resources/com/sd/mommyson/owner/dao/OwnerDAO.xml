
	
	<!-- 할인 삭제 쿼리문 -->
	<update id="removeDc">
			UPDATE DC_PRODUCT
			   SET DC_YN = 'N'
		<where>
		 	SD_CODE IN 
			<foreach collection="list" item="list" separator="," open="(" close=")">
				#{ list }
			</foreach>
		 </where> 
	</update>
	
	<update id="removeDcs">
			UPDATE DC_PRODUCT
			   SET DC_YN = 'N'
		 	 WHERE SD_CODE = #{ sdCode } 
	</update>
	
	
	<!-- 반찬 할인율 제거 쿼리문 -->
	<update id="modifyDc">
			UPDATE PRODUCT_TBL
			   SET DISCOUNT_RATE = 0
		<where>
		 	SD_CODE IN 
			<foreach collection="list" item="list" separator="," open="(" close=")">
				#{ list }
			</foreach>
		 </where>
	</update>
	
	<!-- 영업상태 업데이트 쿼리문 -->
	<update id="modifyOwnerStatus">
		UPDATE STORE_TBL
		   SET STATUS_YN = #{ statusYN }
		 WHERE MEM_CODE = #{ memCode }  
	</update>
	
	<!-- 멤버십 정보 select 쿼리문 -->
	<select id="selectMembership" resultMap="membershipResultMap">
		SELECT
			   MS_CODE
			 , MS_TYPE
			 , MS_DATE
			 , MS_PRICE
	 	  FROM MEMBERSHIP_TBL
	 	 WHERE MS_CODE = #{ msCode }	 
	</select>
	
	<!-- 반찬 수정을 위한 반찬 정보를 가져오는 쿼리문 -->
	<select id="selectPd" resultMap="productResultMap">
		SELECT
			   SD_CODE
		     , SD_NAME
		     , M_DATE
		     , PRICE
		     , INGREDIENT
		     , VOLUME
		     , SD_IMG
		     , CATEGORY
		     , ORDERABLE_STATUS
		     , EXPIRY_DATE
		     , CATEGORY_CODE
		     , SD_DETAIL
		     , STORAGE_METHOD
		  FROM PRODUCT_TBL 
		 WHERE SD_CODE = #{ sdCode }
	</select>
	
	<!-- 반찬 수정을 위한 반찬 태그 정보를 가져오는 쿼리문 -->
	<select id="seletTagList" resultType="_int">
		SELECT 
			   TAG_NO
		  FROM PRODUCT_TAG_TBL
		 WHERE SD_CODE = #{ sdCode }  		   
	</select>
	
	<!-- 반찬 수정 쿼리문 -->
	<update id="updateProduct">
		UPDATE PRODUCT_TBL
		   SET SD_NAME = #{ product.sdName },
		       M_DATE  = #{ product.mDate },
		       PRICE = #{ product.price },
		       INGREDIENT = #{ product.ingredient },
		       VOLUME = #{ product.volume },
		       SD_IMG = #{ fileName },
		       CATEGORY = #{ product.category },
		       ORDERABLE_STATUS = #{ product.orderableStatus },
		       EXPIRY_DATE = #{ product.eDate },
		       CATEGORY_CODE =  #{ product.categoryCode },
		       STORAGE_METHOD = #{ product.storageMethod },
		       SD_DETAIL = #{ product.detail }
		 WHERE SD_CODE = #{ product.sdCode }    
	</update>
	
	<!-- 반찬 태그 삭제 쿼리문 -->
	<delete id="removeTag">
		DELETE
		  FROM PRODUCT_TAG_TBL
		 WHERE SD_CODE = #{ sdCode } 
	</delete>
	
	<!-- 반찬 태그 업데이트 쿼리문 -->
	<insert id="insertTag">
		INSERT
		  INTO PRODUCT_TAG_TBL
	    ( SD_CODE
		, TAG_NO
		) 
		VALUES
		(
		  #{ sdCode }
		, #{ tag }  	
		) 
	</insert>
	
	<!-- 사업자 이용권 여부 조회 쿼리문 -->
	<select id="selectMembershipAndStore" resultMap="selectMembershipAndStoreResultMap">
		SELECT
			   START_DATE
			 , END_DATE
		  FROM MS_STORE_TBL	 
		 WHERE MEM_CODE = #{ memCode } 
		   AND EXTEND_YN = 'N'
	</select>
	
	<!-- 이용권 등록 쿼리문 -->	
	<insert id="registMembership">
		INSERT 
		  INTO MS_STORE_TBL
		(
		   MEM_CODE
		 , MS_CODE
		 , START_DATE
		 , END_DATE
		 , EXTEND_YN
		 , PAY_DATE
		 , MS_STORE_CODE
		 )
		 VALUES
		 (
		    #{ memCode }
		  , #{ msCode }
		  , TO_DATE(#{ startDate },'YYYY-MM-DD')
		  , TO_DATE(#{ endDate },'YYYY-MM-DD')
		  , 'N'
		  , TO_DATE(SYSDATE,'YYYY-MM-DD HH24:mi:ss')
		  , SEQ_MS_STORE.NEXTVAL
		 )
	</insert>
	
	
	<!-- 사업자 이용권 정보 가져오는 쿼리문 -->
	<select id="selectMembershipInfo" resultType="hashMap">
		SELECT
		       A.MS_TYPE
		     , B.START_DATE
		     , B.END_DATE
		  FROM MEMBERSHIP_TBL A
		  JOIN MS_STORE_TBL B ON (A.MS_CODE = B.MS_CODE)
		 WHERE B.MEM_CODE = #{ memCode }
		   AND B.EXTEND_YN = 'N'
	</select>
	
	<!-- 사업자 이용권 연장 여부 변경 쿼리문 -->
	<update id="modifyExtendYn">
		UPDATE MS_STORE_TBL 
		   SET EXTEND_YN = 'Y'
		 WHERE MEM_CODE = #{ memCode }   
	</update>
	
	<!-- 영수증 총 갯수 구하는 쿼리문 -->
	<select id="selectTotalReceipt" resultType="_int">
		SELECT
		       COUNT(*)
		  FROM MEMBERSHIP_TBL A
		  JOIN MS_STORE_TBL B ON (A.MS_CODE = B.MS_CODE)
		  JOIN STORE_TBL C ON(B.MEM_CODE = C.MEM_CODE)
		 WHERE B.MEM_CODE = #{ memCode }      
	</select>

	<!-- 사업자 영수증 출력을 위한 쿼리문 -->
	<select id="selectMembershipInfoList" resultType="hashMap">
		SELECT
			   E.RNUM
		     , E.MS_TYPE
		     , E.MS_PRICE
		     , E.START_DATE
		     , E.PAY_DATE
		     , E.STORE_NAME
		  FROM (SELECT
					   ROWNUM RNUM
				     , D.MS_TYPE
				     , D.MS_PRICE
				     , D.START_DATE
				     , D.PAY_DATE
				     , D.STORE_NAME
				  FROM (SELECT
						       A.MS_TYPE
						     , A.MS_PRICE
						     , B.START_DATE
						     , B.PAY_DATE
						     , C.STORE_NAME
						  FROM MEMBERSHIP_TBL A
						  JOIN MS_STORE_TBL B ON (A.MS_CODE = B.MS_CODE)
						  JOIN STORE_TBL C ON(B.MEM_CODE = C.MEM_CODE)
						 WHERE B.MEM_CODE = #{ memCode }) D ) E
			WHERE E.RNUM BETWEEN #{ pagination.startRow } AND #{ pagination.endRow }		 
	</select>	
	
	<!-- 사업자 이용권 영수증 정보 쿼리문 -->
	<select id="selectPayInfo" resultType="hashMap">
		SELECT
		       A.STORE_NAME
		     , B.STORE_NO
		     , C.ADDRESS
		     , C.D_ADDRESS
		     , C.PHONE
		     , D.PAY_DATE
		     , E.MS_PRICE
		     , D.START_DATE AS startDate
		     , D.END_DATE AS endDate
		  FROM STORE_TBL A 
		  JOIN CEO_TBL B ON (A.MEM_CODE = B.MEM_CODE)
		  JOIN MEMBER_TBL C ON (B.MEM_CODE = C.MEM_CODE)
		  JOIN MS_STORE_TBL D ON (A.MEM_CODE = D.MEM_CODE)
		  JOIN MEMBERSHIP_TBL E ON (D.MS_CODE = E.MS_CODE)
		 WHERE A.MEM_CODE = #{ memCode }
		   AND TO_DATE(D.PAY_DATE,'YY-MM-DD') = #{ payDate } 
	</select>	
	
	<!-- 유통기한 지난 상품 판매여부 변경 쿼리문 -->
	<update id="modifyEDateStatus">
		UPDATE PRODUCT_TBL
		   SET ORDERABLE_STATUS = 'X',
		       DISCOUNT_RATE = 0
		 WHERE SD_CODE = #{ sdCode }   
	</update>

	<!-- 고객들에게 쿠폰 주기 -->
	<insert id="registCpToReview">
		INSERT
		  INTO CP_HISTORY_TBL
		(
			CP_CODE
		  , MEM_CODE
		  , USE_STATUS
		  , CP_NUM
		  , GIVE_DATE
		)
		VALUES
		(
		  	#{ cpCode }
		  , #{ review }
		  , 'N'
		  , SEQ_CP_NUM.NEXTVAL
		  , default
		)
	</insert>
	
	<!-- 쿠폰 발행 내역  -->
	<select id="selectgiveListTotalCount" resultType="_int">
		SELECT
		      COUNT(*)
		 FROM CP_HISTORY_TBL A 
	     JOIN COUPON_STORE_TBL B ON (A.CP_CODE = B.CP_CODE)
	    WHERE B.MEM_CODE = #{ memCode }
	</select>
	
	<select id="selectgiveList" resultMap="cpHistoryResultMap">
		SELECT
		         G.RNUM
		       , G.CP_CODE
		       , G.MEM_CODE
		       , G.USE_STATUS
		       , G.GIVE_DATE
		       , G.NICKNAME
		       , G.CP_NAME
	     FROM (SELECT
		              ROWNUM RNUM
		            , E.CP_CODE
			        , E.MEM_CODE
			        , E.USE_STATUS
			        , E.GIVE_DATE
			        , E.NICKNAME
			        , E.CP_NAME
	            FROM (SELECT
						        A.CP_CODE
						      , A.MEM_CODE
						      , A.USE_STATUS
						      , A.GIVE_DATE
						      , C.NICKNAME
						      , D.CP_NAME
						  FROM CP_HISTORY_TBL A 
						  JOIN COUPON_STORE_TBL B ON (A.CP_CODE = B.CP_CODE)
						  JOIN COUPON_TBL D ON (B.CP_CODE = D.CP_CODE) 
						  JOIN MEMBER_TBL C ON (A.MEM_CODE = C.MEM_CODE)
		                 WHERE B.MEM_CODE = #{ searchCondition }
			   	        ORDER BY A.GIVE_DATE DESC
	                    )E
	          <![CDATA[
	          WHERE ROWNUM <= #{ endRow }
	          ]]>)G
	   <![CDATA[
	  WHERE G.RNUM >= #{ startRow } 
       ]]>
	</select>
	
	<!-- 사업자 하루 총 매출 -->
	<select id="selectTotalPrice" resultType="hashMap">
		SELECT
		       D.totalPrice
		     , D.delcost
		     , D.totalprice - D.delcost AS real 
		  FROM (SELECT
		               SUM(A.TOTAL_PRICE) as totalPrice
		             , (B.DEL_COST * (SELECT COUNT(ORDER_CODE) 
		                               FROM ORDER_TBL 
		                              WHERE ORDER_TYPE ='배달' 
		                                AND STORE_NAME = #{ storeName } 
		                                AND TO_DATE(ORDER_COMPLETE_TIME,'yyyy-MM-dd') = TO_DATE(SYSDATE,'yyyy-MM-dd')
		                             )) AS delCost
		             , B.DEL_COST                
		          FROM ORDER_TBL A
		          JOIN STORE_TBL B ON (A.STORE_NAME = B.STORE_NAME)
		         WHERE A.STORE_NAME = #{ storeName }
		           AND TO_DATE(A.ORDER_COMPLETE_TIME,'yyyy-MM-dd') = TO_DATE(SYSDATE,'yyyy-MM-dd')
		         GROUP BY B.DEL_COST)D
	</select>
	
	<!-- 사업자 하루 배달 총 매출 -->
	<select id="selectDelPrice" resultType="hashMap">
		SELECT
		       SUM(A.TOTAL_PRICE) AS totalPrice
		     , SUM(A.TOTAL_PRICE) - (B.DEL_COST * COUNT(A.ORDER_CODE)) AS real
		     , (B.DEL_COST * COUNT(A.ORDER_CODE)) AS delCost  
		  FROM ORDER_TBL A
		  JOIN STORE_TBL B ON (A.STORE_NAME = B.STORE_NAME)
		 WHERE A.STORE_NAME = #{ storeName } 
		   AND TO_DATE(A.ORDER_COMPLETE_TIME,'yyyy-MM-dd') = TO_DATE(SYSDATE,'yyyy-MM-dd')
		   AND A.ORDER_TYPE = '배달'
		 GROUP BY B.DEL_COST
	</select>
	
	<!-- 사업자 하루 포장 총 매출 -->
	<select id="selectPickupPrice" resultType="_int">
		SELECT
		       SUM(TOTAL_PRICE) as totalPrice
		  FROM ORDER_TBL
		 WHERE ORDER_TYPE ='포장' 
		   AND STORE_NAME = #{ storeName }
		   AND TO_DATE(ORDER_COMPLETE_TIME,'yyyy-MM-dd') = TO_DATE(SYSDATE,'yyyy-MM-dd')
	</select>
	
	<!-- 사업자 일별 매출 쿼리문 -->
	<select id="selectTotalDailySalse" resultType="_int" parameterType="hashMap">
		SELECT 
		      COUNT(*)
		  FROM (SELECT
				       TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD') AS PAYDATE
				     , SUM(TOTAL_PRICE) AS totalPrice
				  FROM ORDER_TBL 
				 WHERE STORE_NAME = #{ storeName } 
				   AND TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD') = TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD')
				 GROUP BY TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD')) A
		  LEFT JOIN pickupPrice pic ON (A.payDate = pic.pickupDate)
		  LEFT JOIN DelPrice del ON (A.payDate = del.delDate)
		<where>
			<if test="date1 != null and date1 != '' ">
				A.PAYDATE BETWEEN #{ date1 } AND #{ date2 } 
			</if>
		</where>  
		 ORDER BY A.PAYDATE DESC
	</select>
	
	
	<!-- 사업자 일별 매출 쿼리문 -->
	<select id="selectDailySales" resultType="hashMap" parameterType="hashMap">
	   SELECT     
	       	   C.RNUM
			 , C.PAYDATE
		     , C.TOTALPRICE
		     , C.PICKUPPRICE
		     , C.DELPRICE  
		  FROM (SELECT
					   ROWNUM RNUM
					 , B.PAYDATE
				     , B.TOTALPRICE
				     , B.PICKUPPRICE
				     , B.DELPRICE  
				  FROM (SELECT 
						       A.PAYDATE
						     , A.TOTALPRICE
						     , pic.PICKUPPRICE
						     , del.DELPRICE
						  FROM (SELECT
								       TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD') AS PAYDATE
								     , SUM(TOTAL_PRICE) AS totalPrice
								  FROM ORDER_TBL 
								 WHERE STORE_NAME = #{ storeName }
								   AND TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD') = TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD')
								 GROUP BY TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM-DD')) A
						  LEFT JOIN pickupPrice pic ON (A.PAYDATE = pic.PICKUPDATE)
						  LEFT JOIN DelPrice del ON (A.PAYDATE = del.DELDATE)
						  <where>
							<if test="date1 != null and date1 != '' ">
								A.PAYDATE BETWEEN #{ date1 } AND #{ date2 } 
							</if>
						  </where>
						 ORDER BY A.PAYDATE DESC) B 
						 ) C
			WHERE C.RNUM BETWEEN #{ pagination.startRow } AND #{ pagination.endRow }			 
	</select>
	
	<!-- 사업자 월별 정산 토탈 카운트 계산 -->
	<select id="selectTotalsalseMonth" resultType="_int">
		SELECT 
		       COUNT(*)
		  FROM (SELECT
				       
				       TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') AS PAYDATE
				     , SUM(TOTAL_PRICE) AS totalPrice
				  FROM ORDER_TBL 
				 WHERE STORE_NAME = #{ storeName }
		                             AND TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') = TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')
				 GROUP BY TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')) A
		  LEFT JOIN MONTH_PICKUP pic ON (A.PAYDATE = pic.PAYDATE)
		  LEFT JOIN MONTH_DEL del ON (A.PAYDATE = del.PAYDATE)
		  <where>
			<if test="date1 != null and date1 != '' ">
				A.PAYDATE BETWEEN #{ date1 } AND #{ date2 } 
			</if>
		</where>
		 ORDER BY A.PAYDATE DESC
	</select>
	
	<!-- 사업자 월별 정산 쿼리문 -->
	<select id="selectSalseMonth" resultType="hashMap">
		SELECT       
	       	   C.RNUM
			 , C.PAYDATE
		     , C.TOTALPRICE
		     , C.PICKPRICE
		     , C.DELPRICE  
		  FROM (SELECT
					   ROWNUM RNUM
					 , B.PAYDATE
				     , B.TOTALPRICE
				     , B.PICKPRICE
				     , B.DELPRICE  
				  FROM (SELECT 
						       A.PAYDATE
						     , A.totalPrice
						     , pic.PICKPRICE
						     , del.DELPRICE
						  FROM (SELECT
								       TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') AS PAYDATE
								     , SUM(TOTAL_PRICE) AS totalPrice
								  FROM ORDER_TBL 
								 WHERE STORE_NAME = #{ storeName }
                                   AND TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') = TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')
								 GROUP BY TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')) A
						  LEFT JOIN MONTH_PICKUP pic ON (A.PAYDATE = pic.PAYDATE)
						  LEFT JOIN MONTH_DEL del ON (A.PAYDATE = del.PAYDATE)
						  <where>
							<if test="date1 != null and date1 != '' ">
								A.PAYDATE BETWEEN #{ date1 } AND #{ date2 } 
							</if>
						  </where>
						 ORDER BY A.PAYDATE DESC) B 
						 ) C
			WHERE C.RNUM BETWEEN #{ pagination.startRow } AND #{ pagination.endRow } 
	</select>
	
	<!-- 정산 메인페이지에서 보여줄 그래프에 들어가는 월별 정산 쿼리문 -->
	<select id="selectMonth" resultType="hashMap">
		SELECT       
	       	   C.RNUM
			 , C.PAYDATE
		     , C.TOTALPRICE
		     , C.PICKPRICE
		     , C.DELPRICE  
		  FROM (SELECT
					   ROWNUM RNUM
					 , B.PAYDATE
				     , B.TOTALPRICE
				     , B.PICKPRICE
				     , B.DELPRICE  
				  FROM (SELECT 
						       A.PAYDATE
						     , A.totalPrice
						     , pic.PICKPRICE
						     , del.DELPRICE
						  FROM (SELECT
								       TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') AS PAYDATE
								     , SUM(TOTAL_PRICE) AS totalPrice
								  FROM ORDER_TBL 
								 WHERE STORE_NAME = #{ storeName }
                                   AND TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM') = TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')
								 GROUP BY TO_CHAR(ORDER_COMPLETE_TIME,'YYYY-MM')) A
						  LEFT JOIN MONTH_PICKUP pic ON (A.PAYDATE = pic.PAYDATE)
						  LEFT JOIN MONTH_DEL del ON (A.PAYDATE = del.PAYDATE)
						 ORDER BY A.PAYDATE DESC) B 
						 ) C
			WHERE C.RNUM BETWEEN 1 AND 5
	</select>
	
	<!-- 회원탈퇴 비밀번호 셀렉트 -->
	<select id="selectEncPwd" resultType="String">
		SELECT
			   MEM_PWD
		  FROM MEMBER_TBL
		 WHERE MEM_CODE = #{ memCode }
	</select>
	
	<!-- 회원탈퇴시 업데이트 -->
	<update id="updateDeleteYN">
		UPDATE MEMBER_TBL
		   SET IS_DELETED = 'Y'
		 WHERE MEM_CODE = #{ memCode }
	</update>
	
</mapper>
