<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sd.mommyson.manager.dao.ManagerDAO">

	<resultMap id="memberResultMap" type="com.sd.mommyson.member.dto.MemberDTO">
		<id property="memCode" column="MEM_CODE"/>
		<result property="email" column="EMAIL"/>
		<result property="memPwd" column="MEM_PWD"/>
		<result property="address" column="ADDRESS"/>
		<result property="postCode" column="POST_CODE"/>
		<result property="dAddress" column="D_ADDRESS"/>
		<result property="phone" column="PHONE"/>
		<result property="memType" column="MEM_TYPE"/>
		<result property="locationCode" column="LOCATION_CODE"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="memId" column="MEM_ID"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="isDeleted" column="IS_DELETED"/>
		<!-- <collection property="user" resultMap="userResultMap"/>
		<collection property="ceo" resultMap="ceoResultMap"/>
		<collection property="manager" resultMap="managerResultMap"/> -->
	</resultMap>
	
	<resultMap type="com.sd.mommyson.member.dto.ManagerDTO" id="managerResultMap">
		<id property="memCode" column="MEM_CODE"/>
		<result property="lastLogin" column="LAST_LOGIN"/>
		<!-- <collection property="authDTO" resultMap="authResultMap"/> -->
	</resultMap>
	
	<select id="normalMemberSelect" resultMap="memberResultMap">
	    SELECT 
			   A.MEM_CODE
			 , A.EMAIL
			 , A.ADDRESS
			 , A.POST_CODE
			 , A.D_ADDRESS
			 , A.PHONE
			 , A.MEM_TYPE
			 , A.LOCATION_CODE
			 , A.NICKNAME
			 , A.MEM_ID
			 , A.ENROLL_DATE
			 , B.NAME
			 , B.REP_COUNT
			 , C.MEM_CODE
		     , C.ACCOUNT
			 , C.STORE_NO
			 , C.CEO_NAME
			 , D.STORE_IMG
		  FROM MEMBER_TBL A
		  LEFT JOIN USER_TBL B ON (A.MEM_CODE = B.MEM_CODE)
		  LEFT JOIN CEO_TBL C ON (A.MEM_CODE = C.MEM_CODE)
		  LEFT JOIN STORE_TBL D ON (A.MEM_CODE = D.MEM_CODE)
		 WHERE A.IS_DELETED = 'N'
		   AND A.MEM_TYPE = 'user'
	</select>
	
	<update id="deleteMembers" parameterType="list">
	    UPDATE
	           MEMBER_TBL A
	       SET A.IS_DELETED = 'Y'
	     <where>
	     	A.MEM_CODE IN
	     	<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
	     		#{ item }
	     	</foreach>
	     </where>
	</update>
	
	<resultMap type="com.sd.mommyson.member.dto.AuthDTO" id="authResultMap">
		<id property="code" column="CODE"/>
		<result property="auth" column="AUTH"/>
	</resultMap>
	
	<select id="selectAuth" resultMap="authResultMap">
		SELECT
			   A.CODE
			 , A.AUTH
		  FROM AUTH_TBL A
		 WHERE A.CODE != 6
	</select>
	
	<update id="updateAuth" parameterType="hashmap">
		UPDATE MANAGER_TBL
		   SET CODE = #{ selected }
		 WHERE MEM_CODE = #{ memCode }
	</update>
	
	<insert id="insertNewManager" parameterType="hashmap">
		INSERT ALL
		INTO MEMBER_TBL VALUES(SEQ_MEMBER.nextval, NULL, #{ member.memPwd }, NULL, NULL, NULL, NULL, 'manager', 'L0', '관리자', #{ member.memId }, SYSDATE, 'N')
		INTO MANAGER_TBL VALUES(SEQ_MEMBER.currval, SYSDATE, #{ code })
		SELECT * FROM DUAL
	</insert>
	
	<select id="selectManagerByMemCode" resultType="hashmap">
		SELECT
			   A.MEM_CODE
			 , A.MEM_ID
			 , B.CODE
		  FROM MEMBER_TBL A
		  JOIN MANAGER_TBL B ON(A.MEM_CODE = B.MEM_CODE)
		 WHERE A.MEM_CODE = #{ memCode }
	</select>
</mapper>